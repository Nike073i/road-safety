@startuml articles

' Base
    abstract class DomainEvent
    abstract class Entity

' Articles

    class Article extends Entity {
        +AuthorId: Guid
        +CreatedAt: DateTimeOffset
        +Visibility: Visibility
        +IsArchived: bool
        +IsEnableCommenting: bool
        +PublicVersion: int
        +Draft: ArticleDraft
        +Info: Info
        
        -Article()
        +Article(ArticleCreatedDomainEvent event)
        +{static} Article Create(ArticleCreatedDomainEvent event)

        +{static} ErrorOr<ArticleCreatedDomainEvent> CreateDefault(Guid authorId, DateTimeOffset currentUtc, string title, string? subtitle, string? image, string[] tags, ArticleBlock[] blocks)
        +ErrorOr<BlockInsertDomainEvent> InsertBlockBefore(Guid userId, DateTimeOffset currentUtc, ArticleBlock block, int position)
        +ErrorOr<BlockMovedAfterDomainEvent> MoveBlockAfter(Guid userId, DateTimeOffset currentUtc, int currentPosition, int afterPosition)
        +ErrorOr<BlockUpdatedDomainEvent> UpdateBlock(Guid userId, DateTimeOffset currentUtc, ArticleBlock block, int position)
        +ErrorOr<BlockRemovedDomainEvent> RemoveBlock(Guid userId, DateTimeOffset currentUtc, int position)
        +ErrorOr<ArticleInfoChangedDomainEvent> UpdateInfo(Guid userId, DateTimeOffset currentUtc, tring title, string? subtitle, string? image, string[] tags)
        +ErrorOr<ArticleVisibilityChangedDomainEvent> SetVisibility(Guid userId, Visibility newVisibility, DateTimeOffset currentUtc)
        +ErrorOr<ArticleCommentingSettingsChangedDomainEvent> SetEnableCommenting(Guid userId, bool isEnable, DateTimeOffset currentUtc)
        +ErrorOr<ArticleArchivedDomainEvent> Archive(Guid userId, DateTimeOffset currentUtc)
        +ErrorOr<ArticleContentUpdated> UpdateContent(Guid userId, DateTimeOffset currentUtc)

        +void Apply(ArticleVisibilityChangedDomainEvent event)
        +void Apply(ArticleArchivedDomainEvent event)
        +void Apply(ArticleContentUpdated event)
        +void Apply(ArticleInfoChangedDomainEvent event)
        +void Apply(BlockInsertDomainEvent event)
        +void Apply(BlockMovedAfterDomainEvent event)
        +void Apply(BlockRemovedDomainEvent event)
        +void Apply(BlockUpdatedDomainEvent event)
        +void Apply(ArticleCommentingSettingsChangedDomainEvent event)
    }

    class ArticleCreatedDomainEvent extends DomainEvent
    class ArticleVisibilityChangedDomainEvent extends DomainEvent
    class ArticleArchivedDomainEvent extends DomainEvent
    class ArticleContentUpdated extends DomainEvent
    class ArticleInfoChangedDomainEvent extends DomainEvent
    class BlockInsertDomainEvent extends DomainEvent
    class BlockMovedAfterDomainEvent extends DomainEvent
    class BlockRemovedDomainEvent extends DomainEvent
    class BlockUpdatedDomainEvent extends DomainEvent
    class ArticleCommentingSettingsChangedDomainEvent extends DomainEvent

    class ArticleErrors
    class ArticleMessages

    class ArticleInfo extends Entity {
        -tags: string[]
        +Title: string
        +Subtitle: string?
        +Image: string?
        +Tags: IReadOnlyCollection<string>
        -ArticleInfo()
        +Article(ArticleCreatedDomainEvent event)
        +void Apply(ArticleInfoChangedDomainEvent event)
    }

    class ArticleDraft extends Entity {
        -blocks: List<ArticleBlock>
        +Blocks: IReadOnlyCollection<ArticleBlock>
        -ArticleBlock()
        +ArticleDraft(ArticleCreatedDomainEvent event)
        +ErrorOr<Success> CanInsertBlockBefore(position)
        +ErrorOr<Success> CanMoveBlock(currentPosition, afterPosition)
        +ErrorOr<Success> CanUpdateBlock(position)
        +ErrorOr<Success> CanRemoveBlock(position)
        +void Apply(BlockInsertDomainEvent event)
        +void Apply(BlockReplacedDomainEvent event)
        +void Apply(BlockUpdatedDomainEvent event)
        +void Apply(BlockRemovedDomainEvent event)
    }

    class Visibility {
        +Name: string
        +{static} Visible: Visibility
        +{static} Hidden: Visibility
        -{static} All: Visibility[]
        +{static} Visibility FromName(string name)
        -Visibility()
    }

    abstract class ArticleBlock

    class ArticleImageBlock extends ArticleBlock {
        title?: string;
        src: string;
    }

    class ArticleTextBlock extends ArticleBlock {
        title?: string;
        paragraphs: string[];
    }

@enduml